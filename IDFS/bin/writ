#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import subprocess
import sys
import json
import pwd
import logging
from datetime import datetime
import shutil

# Configuration du systÃ¨me de logging
log_file_path = 'IDFS/var/log/logfile.log'
logging.basicConfig(filename=log_file_path, level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

def write(filename):
    try:
        subprocess.run(["nano", filename], check=True)
        update_metadata(filename)
    except subprocess.CalledProcessError as e:
        logging.error("Une erreur s'est produite lors de l'edition : %s", e)
        sys.exit(1)

def update_metadata(filename):
    try:
        stat_info = os.stat(filename)
        date_creation = datetime.fromtimestamp(stat_info.st_ctime).strftime('%Y-%m-%d %H:%M:%S')
        date_modification = datetime.fromtimestamp(stat_info.st_mtime).strftime('%Y-%m-%d %H:%M:%S')
        user_info = pwd.getpwuid(stat_info.st_uid)
        username = user_info.pw_name
        user_home_dir = f"/home/IDFS/home/{username}"

        if not os.path.exists(user_home_dir):
            os.makedirs(user_home_dir)

        destination_path = os.path.join(user_home_dir, os.path.basename(filename))
        shutil.move(filename, destination_path)

        metadata = {
            "Nom du fichier": filename,
            "Date de creation": date_creation,
            "Date de derniere modification": date_modification,
            "Taille du fichier": stat_info.st_size,
            "Permissions": oct(stat_info.st_mode)[-3:],
            "Nom d'utilisateur": username,
        }

        output_file = f"/home/IDFS/etc/metadata_{username}"

        if not os.path.isfile(output_file):
            with open(output_file, "w") as f:
                json.dump([metadata], f, indent=2)
            logging.info("Fichier de metadonnees cree a %s", output_file)
        else:
            with open(output_file, "r") as f:
                try:
                    existing_metadata = json.load(f)
                except json.JSONDecodeError:
                    existing_metadata = []

            existing_metadata.append(metadata)

            with open(output_file, "w") as f:
                json.dump(existing_metadata, f, indent=2)

            logging.info("Metadonnees ajoutees dans %s", output_file)

    except FileNotFoundError:
        logging.error("Le fichier '%s' n'existe pas.", filename)
    except Exception as e:
        logging.error("Une erreur s'est produite : %s", e)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: write <file>")
        logging.error("Nombre incorrect d'arguments passes.")
        sys.exit(1)

    filename = sys.argv[1]
    write(filename)


 